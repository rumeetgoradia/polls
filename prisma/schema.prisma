// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  polls Poll[]

  votes Vote[]
  @@map(name: "users")
}

model Poll {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  editedAt  DateTime @default(now())

  title       String    @db.VarChar(600)
  description String?   @db.VarChar(5000)
  options     Option[]
  isPublic    Boolean
  endsAt      DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  @@index([userId])
}

model Option {
  id String @id @default(cuid())

  title String @db.VarChar(600)
  votes Vote[]

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
}

model Vote {
  id String @id @default(cuid())

  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}
